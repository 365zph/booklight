var booklight_box = $('.booklight_chromExtension');
var searchBar     = $('.booklight_chromExtension>input');
var bookmarksList = $('.booklight_list_chromExtension');
var statusBar     = $('.booklight_status_chromExtension');

var foldersList   = [],  urls = [];

// multiple shortcuts that do the same thing
key('control+b, ctrl+b', function(){ start(); });
key('esc, escape', function(){ booklight_box.hide(); });

chrome.runtime.onConnect.addListener(function(port) {
	port.onMessage.addListener(function(msg) {
		port.postMessage({message: " -> Received Successfull"});
			init(msg.message);
	});
});

function init(bookmarksTree) {
	// Check if the bookmarks folder have been fetched and saved using the Chrome extension storage API.
	chrome.storage.local.get("booklight", function(bookmarks) {
		if (!bookmarks.length) {

			// The bookmarks folders have not been fetched yet, lets do that
			console.log("Running the Script for the first time ... fetch the stuff from background and cache!!");

			foldersList = filterRecursively(bookmarksTree, "children", function(node) {
				if (node.url) urls.push(node);
				return !node.url && node.id > 0;
			}).sort(function(a, b) {
			// The sort functions make sure that we will have the last used folders on top
			return b.dateGroupModified - a.dateGroupModified;
			});

			chrome.storage.local.set({"booklight": foldersList }, function(bookmarks) { console.log("Setting the folders list into the local storage !!") });
			chrome.storage.local.set({"urls": urls }, function(bookmarks) { console.log("Setting the urls list into the local storage !!") });
			buildUI(bookmarks);

			// Recursively filter the passed TreeNodes
			function filterRecursively(nodeArray, childrenProperty, filterFn, results) {

				results = results || [];

				nodeArray.forEach( function( node ) {
					if (filterFn(node)) results.push( node );
					if (node.children) filterRecursively(node.children, childrenProperty, filterFn, results);
				});
				return results;
			};

		} else buildUI(bookmarks);
	});
}

function buildUI(bookmarks){

	// Append the search lightbox to the body DOM element
	$('body').append('<div class="booklight_chromExtension">'+
		'<input placeholder="Filter..." type="text" data-list=".booklight_list_chromExtension" autocomplete="off"></input>' +
		'<span class="booklight_status_chromExtension"></span>' +
		'<ul class="booklight_list_chromExtension"></div></div>');

	bookmarks.booklight.forEach(function(bookmark){
		bookmarksList.append('<li>' + bookmark.title + '</li>');
	});
}

function start() {
	console.log('A');
	booklight_box.show();
	searchBar.val('').focus();
	searchBar.hideseek({ highlight: true }).on("_after_each", function() {
  	statusBar.text(bookmarksList.find('li:visible').length + " matchinf results");
	});
}

// Overriding the filter function to make it work on the input boxes
key.filter = function(event){
	var tagName = (event.target || event.srcElement).tagName;
	key.setScope(/^(INPUT)$/.test(tagName) ? 'input' : 'other');
	return true;
}